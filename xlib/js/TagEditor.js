'use strict';
/** ---------------------------------------------------------------------
  *
    class TagEditor
    ---------------
    √âdition/cr√©ation des tags de commentaires
  *
*** --------------------------------------------------------------------- */
const DATA_TAG_TYPES = {
    'ort': {id:'ort', hname: 'Faute d‚Äôorthographe'  , shortcut:'f'}
  , 'cri': {id:'cri', hname: 'Commentaire critique' , shortcut:'d'}
  , 'unc': {id:'unc', hname: 'Passage peu clair'    , shortcut:'q'}
  , 'sty': {id:'sty', hname: 'Probl√®me de style'    , shortcut:'s'}
  , 'com': {id:'com', hname: 'Simple commentaire'   , shortcut:'w'}
  , 'pos': {id:'pos', hname: 'Commentaire positif', positive:true, shortcut:'x'}
  , 'dro': {id:'dro', hname: 'Dr√¥le, marrant', positive:true, shortcut:'v'}
}
class TagEditor {

  static edit(tag, options){
    if ( undefined === tag.editor ) tag.editor = new TagEditor(tag)
    tag.editor.show(options)
  }

  /**
    +return+:: [Boolean] true si les donn√©es +data+ sont valides,
        false dans le cas contraire.
  **/
  static areDataValides(data){
    try {
      data.content || raise("Il faut imp√©rativement d√©finir le commentaire.")
      return true
    } catch (err) {
      console.error(err)
      return false
    }
  }
  /**
    Liste des types possibles
  **/
  static get OptionsTypes(){
    if (undefined === this._optionstypes) {
      this._optionstypes = Object.values(DATA_TAG_TYPES).map(dtype => DCreate('OPTION', {value:dtype.id, inner:dtype.hname}))
    } return this._optionstypes ;
  }

  /**
    Les <options> pour les intensit√©s
  **/
  static get OptionsIntensityPos(){
    if (undefined === this._optionsintensitypos) {
      this._optionsintensitypos = this.buildMenuIntensityWith('‚ù§Ô∏è')
    } return this._optionsintensitypos
  }
  static get OptionsIntensityNeg(){
    if (undefined === this._optionsintensityneg) {
      const inten = [1,2,3,4,5]
      this._optionsintensityneg = this.buildMenuIntensityWith('üß®')
    } return this._optionsintensityneg
  }
  static buildMenuIntensityWith(char){
    const inten = [1,2,3,4,5]
    return inten.map(i => {
      var tit = 'normale'
      if ( i > 1 ) { tit = ''.padStart((i - 1)*2,char) }
      return DCreate('OPTION',{value:i, inner:tit})}
    )
  }

  /** ---------------------------------------------------------------------
    *   INSTANCE
    *
  *** --------------------------------------------------------------------- */

  constructor(tag, params){
    this.tag  = tag
    this.id   = Number(new Date())

    this.onOK     = this.onOK.bind(this)
    this.onCancel = this.onCancel.bind(this)
  }

  /**
    Affichage de l'√©diteur du tag

    +options+:: [Undefined|Object] Peut d√©finir notamment la position
        de la fen√™tre
  **/
  show(options){
    this.obj || this.build()
    this.obj.classList.remove('noDisplay')
    this.setFormValues()
    // On focus toujours dans le champ du texte du commentaire
    this.contentField.focus()
    this.contentField.select()
  }

  hide(){
    this.obj.classList.add('noDisplay')
  }

  /*
      M√©thodes d'event
  */

  onOK(ev){
    // Prendre en compte les changements et enregistrer si n√©cessaire
    let newValues = this.getFormValues()
    if ( this.constructor.areDataValides(newValues)){
      this.tag.set(newValues, /* prop-trait-plat */ false, /* save = */ true /* si changement */)
      // Note : ci-dessus, le deuxi√®me argument est √† false pour que la
      // m√©thode 'set' renseigne la propri√©t√© directe (par get prop(v){...})
      // afin d'actualiser aussi dans l'interface.
    }
    this.hide()
    return stopEvent(ev)
  }

  onCancel(ev){
    this.hide()
    return stopEvent(ev)
  }

  /*
      Form methods
  */

  static get PROPERTIES(){
    if (undefined === this._properties){
      this._properties = [
          {prop:'type',       type:'string',  fieldProp:'value'}
        , {prop:'content',    type:'string',  fieldProp:'value'}
        , {prop:'intensity',  type:'number',  fieldProp:'value'}
        , {prop:'fixed',      type:'boolean', fieldProp:'checked'}
      ]
    } return this._properties;
  }

  /**
    On met les valeurs au formulaire
  **/
  setFormValues(){
    this.constructor.PROPERTIES.map(dprop => {
      this[`${dprop.prop}Field`][dprop.fieldProp] = this.tag[dprop.prop].value
    })
  }

  /**
    On r√©cup√®re les valeurs du formulaire
  **/
  getFormValues(){
    var h = {}
    this.constructor.PROPERTIES.map(dprop => {
      let value = this[`${dprop.prop}Field`][dprop.fieldProp]
      switch(dprop.type){
        case 'string':  value = value.trim(); break;
        case 'number':  value = Number(value); break;
        case 'boolean': value = Boolean(value); break;
      }
      Object.assign(h, {[dprop.prop]: value})
    })
    console.log("Nouvelles donn√©es : ", h)
    return h
  }

  /*
      DOM/build methods
  */
  /**
    Construction de l'√©diteur de tag
  **/
  build() {
    const div = DCreate('DIV', {
        id: this.domId
      , class: 'tag-editor noDisplay'
      , inner: [
            DCreate('DIV', {class:'title', inner: `Commentaire #${this.tag.id.value}`})
          , DCreate('DIV', {class:'content', inner: [
                DCreate('DIV', {class:'row', inner:[
                  DCreate('SELECT', {class:'type', name:'type', inner:this.constructor.OptionsTypes})
                ]})
              , DCreate('TEXTAREA', {class:'comment', name:'comment', inner:"Commentaire par d√©faut"})
              , DCreate('DIV', {class:'row', inner:[
                    DCreate('LABEL', {inner: "Intensit√© : "})
                  , DCreate('SELECT', {class:'intensity', inner:this.constructor[`OptionsIntensity${this.isPositive?'Pos':'Neg'}`]})
                ]})
              , DCreate('DIV', {class:'row', class:'right cb-fixed-div', inner:[
                    DCreate('INPUT', {type:'CHECKBOX', id:this.fixedCbId, class:'fixed', name:'fixed'})
                  , DCreate('LABEL', {inner:'corrig√©', for:this.fixedCbId})
                ]})
            ]})
          , DCreate('DIV', {class:'buttons', inner: [
                DCreate('BUTTON', {type:'button', class:'btn-cancel', inner:'Renoncer'})
              , DCreate('BUTTON', {type:'button', class:'btn-ok', inner:'OK'})
            ]})
        ]
    })
    this.tag.obj.appendChild(div)
    // document.body.appendChild(div)
    this.observe()
  }

  updateMenuIntensity(){
    const curValue = this.intensityField.value
    this.intensityField.innerHTML = ''
    log("isPositive = ", this.isPositive)
    log("Ajout de ", this.constructor[`OptionsIntensity${this.isPositive?'Pos':'Neg'}`])
    this.constructor[`OptionsIntensity${this.isPositive?'Pos':'Neg'}`]
    .forEach( option => this.intensityField.appendChild(option) )
    this.intensityField.value = curValue
  }

  get fixedCbId(){
    return this._fixedcbid || (this._fixedcbid = `fixed-cb-${this.id}`)
  }

  /*
      Event methods
  */

  observe(){
    DGet('.btn-ok', this.obj).addEventListener('click', this.onOK)
    DGet('.btn-cancel', this.obj).addEventListener('click', this.onCancel)
    this.contentField.addEventListener('keypress', this.onKeyPress.bind(this))
    this.typeField.addEventListener('change', this.onChangeType.bind(this))
    // Il faut d√©sactiver tout click sur la fiche elle-m√™me (pour ne pas
    // d√©clencher des √©ditions de fiche en dessous)
    this.obj.addEventListener('click', ev => stopEvent(ev))
    // Mais il faut remettre la sensibilit√© sur le cb
    // this.fixedCb.addEventListener('click', this.onClickFixedCb.bind(this))
    DGet('div.cb-fixed-div',this.obj).addEventListener('click', this.onClickFixedCb.bind(this))


  }

  /**
    Pour compenser le fait qu'on tue tous les √©v√®nements click
  **/
  onClickFixedCb(){
    console.log("this.fixedCb.checked = ", this.fixedCb.checked)
    this.fixedCb.checked = !this.fixedCb.checked
  }

  onChangeType(ev){
    this.updateMenuIntensity()
  }

  onKeyPress(ev){
    // console.log("Touche press√©e : ", ev.key)
    switch(ev.key){
      case 'Enter':
        if (ev.metaKey) {
          return this.onOK(ev)
        } else { return true }
      case 'Escape':
        return this.onCancel(ev)
      default:
        return true
    }
  }

  /**
    Retourne true si c'est un tag positif, false dans le cas contraire
    Cette valeur est prise dans le menu du type du tag, car il peut √™tre
    diff√©rent de celui du tag √©dit√©
  **/
  get isPositive(){
    var value ;
    if ( this.obj /* si la boite est construite */ ) {
      value = this.typeField.value
    } else /* boite en construction */ {
      value = this.tag.type.value
    }
    return DATA_TAG_TYPES[value].positive === true
  }

  get fixedCb(){
    return this._fixedcb || (this._fixedcb = DGet(`#${this.fixedCbId}`, this.obj))
  }
  get intensityField(){
    return this._intensityfield || (this._intensityfield = DGet('select.intensity', this.obj))
  }
  get typeField(){
    return this._typefield || (this._typefield = DGet('select.type', this.obj))
  }
  get contentField(){
    return this._contentField || (this._contentField = DGet('textarea.comment',this.obj))
  }
  get fixedField(){
    return this._fixedField || (this._fixedField = DGet('input.fixed',this.obj))
  }

  get obj(){
    return this._obj || (this._obj = DGet(`div#${this.domId}`))
  }
  get domId(){
    return this._domid || (this._domid = `tag-editor-${Number(new Date())}`)
  }
}
